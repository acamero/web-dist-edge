{"id":"node_modules/web-dist-edge/index.js","dependencies":[{"name":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/package.json","includedInParent":true,"mtime":1551266702340},{"name":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/package.json","includedInParent":true,"mtime":1551268754348},{"name":"amqplib/callback_api","loc":{"line":1,"column":19},"parent":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/index.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/node_modules/amqplib/callback_api.js"},{"name":"./stompws.js","loc":{"line":2,"column":18},"parent":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/index.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/stompws.js"},{"name":"sockjs-client","loc":{"line":3,"column":21},"parent":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/index.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/node_modules/sockjs-client/lib/entry.js"},{"name":"buffer","parent":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/index.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/buffer/index.js"},{"name":"process","parent":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/web-dist-edge/index.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/lstm-text-generation/node_modules/process/browser.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar process = require(\"process\");\nvar amqp = require('amqplib/callback_api');\nvar stw = require('./stompws.js');\nvar SockJS = require('sockjs-client');\n\n/**\n* Generates an AMQP connection string\n*/\nfunction getAmqpConnectionStr(serverUrl, port=null, user=null, pswd=null) {\n  let connStr = 'amqp://';\n  if(user != null && pswd != null) {\n    connStr = connStr + user + ':' + pswd + '@';\n  }\n  connStr = connStr + serverUrl;\n  if(port != null) {\n    connStr = connStr + ':' + port;\n  }\n  return connStr;\n}\n\nmodule.exports.getAmqpConnectionStr = getAmqpConnectionStr;\n\n\n/**\n* connStr: ampq style connection string\n* queueName         name of the destination queue\n* numMaps           total number of map tasks\n* accumReduce       number of map tasks to accumulate before reducing\n* mapPayloadFn      [optional] user-defined function that receives the map task index, the relative order of the\n*                   mapper inside the batch (i.e., before a new reduce is performed), and the reduce index,\n*                   and returns an object (payload) to be included in the task\n* reducePayloadFn   [optional] idem as mapPayloadFn, but added to the reducer\n*/\nfunction enqueueTask(connStr, queueName, numMaps, accumReduce, mapPayloadFn=null, reducePayloadFn=null) {\n  amqp.connect(connStr, function(err, conn) {\n    conn.createChannel(function(err, ch) {\n      ch.assertQueue(queueName, {durable: true});    \n      let awaitId = [];\n      let reduceIx = 1;\n      for(let i=1; i <= numMaps; i++) {\n        let mapIx = ((i-1) % accumReduce) + 1;\n        // TODO: incluir tolerancia a fallos\n        let mapper = {};\n        mapper.procId = \"mapper_\" + reduceIx + \"_\" + mapIx; // TODO: improve id\n        mapper.mapOrReduce = \"map\";\n        mapper.queueName = queueName;\n        if(mapPayloadFn && typeof(mapPayloadFn) == 'function') {\n          mapper.payload = mapPayloadFn(i, mapIx, reduceIx);\n        }\n        console.log(mapper);\n        ch.sendToQueue(queueName, new Buffer(JSON.stringify(mapper)), {persistent: true});\n        awaitId.push(mapper.procId);\n        if( i%accumReduce == 0 || i == numMaps ) {\n          let reducer = {};\n          reducer.procId = \"reducer_\" + reduceIx;\n          reducer.mapOrReduce = \"reduce\";\n          reducer.awaitId = awaitId;\n          reducer.queueName = queueName;\n          if(reducePayloadFn && typeof(reducePayloadFn) == 'function') {\n            reducer.payload = reducePayloadFn(i, mapIx, reduceIx);\n          }\n          console.log(reducer);\n          ch.sendToQueue(queueName, new Buffer(JSON.stringify(reducer)), {persistent: true});\n          awaitId.length = 0;\n          reduceIx++;\n        }\n      }\n    });\n    //TODO is this necesary?\n    setTimeout(function() { conn.close(); process.exit(0); }, 500);\n  });\n}\n\nmodule.exports.enqueueTask = enqueueTask;\n\n\n/**\n*\n*/\nclass Worker {\n  constructor(serverUrl, port, queueName, user, pswd, mapFn, reduceFn) {\n    this.mapFn = mapFn;\n    this.reduceFn = reduceFn;\n    this.wsConnStr = 'http://' + serverUrl + ':' + port + '/stomp';\n    this.user = user;\n    this.pswd = pswd;\n    this.queueName = queueName;\n    let ws = new SockJS(this.wsConnStr);\n    this.client = stw.Stomp.over(ws);\n  }\n\n  sendToQueue(msg, queueName) {\n    //TODO poner el mensaje en la cola\n    console.log(\"Mensaje '\" + JSON.stringify(msg) + \"' encolado en \" + queueName);\n  }\n\n  procMessage(msg, self) {\n    const decoded = JSON.parse(msg); \n    if( decoded.mapOrReduce == \"map\" ) {\n      if(self.mapFn && typeof(self.mapFn) == 'function') {\n        let mapResult = self.mapFn(decoded);\n        let msgResult = {}\n        msgResult.procId = decoded.procId;\n        msgResult.result = mapResult;\n        self.sendToQueue(msgResult, decoded.queueName + \"_maps\");\n      } else {\n        console.log(\"Map function not found\");\n      }\n    } else if ( decoded.mapOrReduce == \"reduce\" ) {\n      if(self.reduceFn && typeof(self.reduceFn) == 'function') {\n        //TODO gestionar la espera, i.e., ocultamos al usuario el\n        // bloqueo a la espera de que las tareas en \"await\" hayan acabado,\n        // e incluir los resultados de las tareas\n        let reduceResult = self.reduceFn(decoded);\n        let msgResult = {}\n        msgResult.procId = decoded.procId;\n        msgResult.result = reduceResult;\n        self.sendToQueue(msgResult, decoded.queueName + \"_reduces\");\n      } else {\n        console.log(\"Reduce function not found\");\n      }\n    } else {\n      console.log(\"Error, task corrupted\");\n    }  \n  }\n\n  start() {\n    let self = this;\n    let onConnect = () => {\n      let sub = this.client.subscribe(self.queueName, function(message) {\n        self.procMessage(message.body, self);\n      });\n    }\n    let onError = () => {\n      console.log(\"Error connecting to \" + self.wsConnStr);\n    }\n    this.client.connect(this.user, this.pswd, onConnect, onError, '/');\n  }\n}\n\nmodule.exports.Worker = Worker;\n","map":{"mappings":[{"source":"node_modules/web-dist-edge/index.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/web-dist-edge/index.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}}],"sources":{"node_modules/web-dist-edge/index.js":"var amqp = require('amqplib/callback_api');\nvar stw = require('./stompws.js');\nvar SockJS = require('sockjs-client');\n\n/**\n* Generates an AMQP connection string\n*/\nfunction getAmqpConnectionStr(serverUrl, port=null, user=null, pswd=null) {\n  let connStr = 'amqp://';\n  if(user != null && pswd != null) {\n    connStr = connStr + user + ':' + pswd + '@';\n  }\n  connStr = connStr + serverUrl;\n  if(port != null) {\n    connStr = connStr + ':' + port;\n  }\n  return connStr;\n}\n\nmodule.exports.getAmqpConnectionStr = getAmqpConnectionStr;\n\n\n/**\n* connStr: ampq style connection string\n* queueName         name of the destination queue\n* numMaps           total number of map tasks\n* accumReduce       number of map tasks to accumulate before reducing\n* mapPayloadFn      [optional] user-defined function that receives the map task index, the relative order of the\n*                   mapper inside the batch (i.e., before a new reduce is performed), and the reduce index,\n*                   and returns an object (payload) to be included in the task\n* reducePayloadFn   [optional] idem as mapPayloadFn, but added to the reducer\n*/\nfunction enqueueTask(connStr, queueName, numMaps, accumReduce, mapPayloadFn=null, reducePayloadFn=null) {\n  amqp.connect(connStr, function(err, conn) {\n    conn.createChannel(function(err, ch) {\n      ch.assertQueue(queueName, {durable: true});    \n      let awaitId = [];\n      let reduceIx = 1;\n      for(let i=1; i <= numMaps; i++) {\n        let mapIx = ((i-1) % accumReduce) + 1;\n        // TODO: incluir tolerancia a fallos\n        let mapper = {};\n        mapper.procId = \"mapper_\" + reduceIx + \"_\" + mapIx; // TODO: improve id\n        mapper.mapOrReduce = \"map\";\n        mapper.queueName = queueName;\n        if(mapPayloadFn && typeof(mapPayloadFn) == 'function') {\n          mapper.payload = mapPayloadFn(i, mapIx, reduceIx);\n        }\n        console.log(mapper);\n        ch.sendToQueue(queueName, new Buffer(JSON.stringify(mapper)), {persistent: true});\n        awaitId.push(mapper.procId);\n        if( i%accumReduce == 0 || i == numMaps ) {\n          let reducer = {};\n          reducer.procId = \"reducer_\" + reduceIx;\n          reducer.mapOrReduce = \"reduce\";\n          reducer.awaitId = awaitId;\n          reducer.queueName = queueName;\n          if(reducePayloadFn && typeof(reducePayloadFn) == 'function') {\n            reducer.payload = reducePayloadFn(i, mapIx, reduceIx);\n          }\n          console.log(reducer);\n          ch.sendToQueue(queueName, new Buffer(JSON.stringify(reducer)), {persistent: true});\n          awaitId.length = 0;\n          reduceIx++;\n        }\n      }\n    });\n    //TODO is this necesary?\n    setTimeout(function() { conn.close(); process.exit(0); }, 500);\n  });\n}\n\nmodule.exports.enqueueTask = enqueueTask;\n\n\n/**\n*\n*/\nclass Worker {\n  constructor(serverUrl, port, queueName, user, pswd, mapFn, reduceFn) {\n    this.mapFn = mapFn;\n    this.reduceFn = reduceFn;\n    this.wsConnStr = 'http://' + serverUrl + ':' + port + '/stomp';\n    this.user = user;\n    this.pswd = pswd;\n    this.queueName = queueName;\n    let ws = new SockJS(this.wsConnStr);\n    this.client = stw.Stomp.over(ws);\n  }\n\n  sendToQueue(msg, queueName) {\n    //TODO poner el mensaje en la cola\n    console.log(\"Mensaje '\" + JSON.stringify(msg) + \"' encolado en \" + queueName);\n  }\n\n  procMessage(msg, self) {\n    const decoded = JSON.parse(msg); \n    if( decoded.mapOrReduce == \"map\" ) {\n      if(self.mapFn && typeof(self.mapFn) == 'function') {\n        let mapResult = self.mapFn(decoded);\n        let msgResult = {}\n        msgResult.procId = decoded.procId;\n        msgResult.result = mapResult;\n        self.sendToQueue(msgResult, decoded.queueName + \"_maps\");\n      } else {\n        console.log(\"Map function not found\");\n      }\n    } else if ( decoded.mapOrReduce == \"reduce\" ) {\n      if(self.reduceFn && typeof(self.reduceFn) == 'function') {\n        //TODO gestionar la espera, i.e., ocultamos al usuario el\n        // bloqueo a la espera de que las tareas en \"await\" hayan acabado,\n        // e incluir los resultados de las tareas\n        let reduceResult = self.reduceFn(decoded);\n        let msgResult = {}\n        msgResult.procId = decoded.procId;\n        msgResult.result = reduceResult;\n        self.sendToQueue(msgResult, decoded.queueName + \"_reduces\");\n      } else {\n        console.log(\"Reduce function not found\");\n      }\n    } else {\n      console.log(\"Error, task corrupted\");\n    }  \n  }\n\n  start() {\n    let self = this;\n    let onConnect = () => {\n      let sub = this.client.subscribe(self.queueName, function(message) {\n        self.procMessage(message.body, self);\n      });\n    }\n    let onError = () => {\n      console.log(\"Error connecting to \" + self.wsConnStr);\n    }\n    this.client.connect(this.user, this.pswd, onConnect, onError, '/');\n  }\n}\n\nmodule.exports.Worker = Worker;\n"},"lineCount":143}},"hash":"b0c80cde12598f45ccad72563af7108e","cacheData":{"env":{}}}