{"id":"node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","dependencies":[{"name":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js.map","includedInParent":true,"mtime":1550574230668},{"name":"/home/andu/Documents/git/web-dist-edge/examples/mnist/package.json","includedInParent":true,"mtime":1550736445286},{"name":"/home/andu/Documents/git/web-dist-edge/examples/mnist/.babelrc","includedInParent":true,"mtime":1550128877340},{"name":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1550574230668},{"name":"@tensorflow/tfjs-core","loc":{"line":3,"column":26},"parent":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js"},{"name":"../errors","loc":{"line":4,"column":23},"parent":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/errors.js"},{"name":"../utils/generic_utils","loc":{"line":5,"column":30},"parent":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js"},{"name":"./input_layer","loc":{"line":6,"column":28},"parent":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js"},{"name":"./topology","loc":{"line":7,"column":25},"parent":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js","resolved":"/home/andu/Documents/git/web-dist-edge/examples/mnist/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar errors_1 = require(\"../errors\");\nvar generic_utils_1 = require(\"../utils/generic_utils\");\nvar input_layer_1 = require(\"./input_layer\");\nvar topology_1 = require(\"./topology\");\nfunction assertFeedCompatibility(key, val) {\n    if (key.dtype == null || key.dtype === val.dtype) {\n        return val;\n    }\n    try {\n        return tfjs_core_1.cast(val, key.dtype);\n    }\n    catch (err) {\n        throw new errors_1.ValueError(\"The dtype of the feed (\" + val.dtype + \") can not be cast to the dtype \" +\n            (\"of the key '\" + key.name + \"' (\" + key.dtype + \").\"));\n    }\n}\nvar FeedDict = (function () {\n    function FeedDict(feeds) {\n        this.id2Value = {};\n        this.id2Mask = {};\n        this.name2Id = {};\n        if (feeds instanceof FeedDict) {\n            for (var id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n                if (id in feeds.id2Mask) {\n                    this.id2Mask[id] = feeds.id2Mask[id];\n                }\n            }\n        }\n        else {\n            if (feeds == null) {\n                return;\n            }\n            for (var _i = 0, feeds_1 = feeds; _i < feeds_1.length; _i++) {\n                var feed = feeds_1[_i];\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    FeedDict.prototype.add = function (key, value, mask) {\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = assertFeedCompatibility(key, value);\n            this.name2Id[key.name] = key.id;\n            if (mask != null) {\n                this.id2Mask[key.id] = mask;\n            }\n        }\n        else {\n            throw new errors_1.ValueError(\"Duplicate key: name=\" + key.name + \", id=\" + key.id);\n        }\n        return this;\n    };\n    FeedDict.prototype.addFeed = function (feed) {\n        this.add(feed.key, feed.value);\n    };\n    FeedDict.prototype.hasKey = function (key) {\n        return this.id2Value[key.id] != null;\n    };\n    FeedDict.prototype.names = function () {\n        return Object.keys(this.name2Id);\n    };\n    FeedDict.prototype.getValue = function (key) {\n        if (key instanceof topology_1.SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new errors_1.ValueError(\"Nonexistent key: \" + key.name);\n            }\n            else {\n                return this.id2Value[key.id];\n            }\n        }\n        else {\n            var id = this.name2Id[key];\n            if (id == null) {\n                throw new errors_1.ValueError(\"Feed dict has no SymbolicTensor name: \" + key);\n            }\n            return this.id2Value[id];\n        }\n    };\n    FeedDict.prototype.getMask = function (key) {\n        if (key instanceof topology_1.SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new errors_1.ValueError(\"Nonexistent key: \" + key.name);\n            }\n            else {\n                return this.id2Mask[key.id];\n            }\n        }\n        else {\n            var id = this.name2Id[key];\n            if (id == null) {\n                throw new errors_1.ValueError(\"Feed dict has no SymbolicTensor name: \" + key);\n            }\n            return this.id2Mask[id];\n        }\n    };\n    FeedDict.prototype.disposeMasks = function () {\n        if (this.id2Mask != null) {\n            tfjs_core_1.dispose(this.id2Mask);\n        }\n    };\n    return FeedDict;\n}());\nexports.FeedDict = FeedDict;\nvar cachedSorted = {};\nvar cachedRecipientCounts = {};\nfunction execute(fetches, feedDict, kwargs, probe) {\n    var training = kwargs == null ? false : kwargs['training'];\n    var arrayFetches = Array.isArray(fetches);\n    var fetchArray = arrayFetches ? fetches : [fetches];\n    var outputNames = fetchArray.map(function (t) { return t.name; });\n    var finalOutputs = [];\n    var feedNames = feedDict.names();\n    for (var _i = 0, outputNames_1 = outputNames; _i < outputNames_1.length; _i++) {\n        var outputName = outputNames_1[_i];\n        if (feedNames.indexOf(outputName) !== -1) {\n            finalOutputs.push(feedDict.getValue(outputName));\n        }\n        else {\n            finalOutputs.push(null);\n        }\n    }\n    if (probe != null) {\n        probe.maxNumTensors = -Infinity;\n        probe.minNumTensors = Infinity;\n    }\n    var fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().join(',');\n    var sorted;\n    var recipientCounts;\n    if (cachedSorted[fetchAndFeedKey] == null) {\n        var out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n        sorted = out.sorted;\n        recipientCounts = out.recipientCounts;\n        cachedSorted[fetchAndFeedKey] = sorted;\n        cachedRecipientCounts[fetchAndFeedKey] = recipientCounts;\n    }\n    sorted = cachedSorted[fetchAndFeedKey];\n    recipientCounts = {};\n    if (!training) {\n        Object.assign(recipientCounts, cachedRecipientCounts[fetchAndFeedKey]);\n    }\n    var internalFeedDict = new FeedDict(feedDict);\n    for (var i = 0; i < sorted.length; ++i) {\n        if (probe != null) {\n            var numTensors = tfjs_core_1.memory().numTensors;\n            if (numTensors > probe.maxNumTensors) {\n                probe.maxNumTensors = numTensors;\n            }\n            if (numTensors < probe.minNumTensors) {\n                probe.minNumTensors = numTensors;\n            }\n        }\n        var symbolic = sorted[i];\n        var srcLayer = symbolic.sourceLayer;\n        if (srcLayer instanceof input_layer_1.InputLayer) {\n            continue;\n        }\n        var inputValues = [];\n        var inputMasks = [];\n        var tensorsToDispose = [];\n        var maskExists = false;\n        for (var _a = 0, _b = symbolic.inputs; _a < _b.length; _a++) {\n            var input = _b[_a];\n            var value = internalFeedDict.getValue(input);\n            var mask = internalFeedDict.getMask(input);\n            inputValues.push(value);\n            inputMasks.push(mask);\n            if (mask != null) {\n                maskExists = true;\n            }\n            if (!training) {\n                recipientCounts[input.name]--;\n                if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n                    outputNames.indexOf(input.name) === -1 && !value.isDisposed) {\n                    tensorsToDispose.push(value);\n                }\n            }\n        }\n        if (maskExists) {\n            kwargs = kwargs || {};\n            kwargs['mask'] = inputMasks[0];\n        }\n        var outputTensors = generic_utils_1.toList(srcLayer.apply(inputValues, kwargs));\n        var outputMask = null;\n        if (srcLayer.supportsMasking) {\n            outputMask = srcLayer.computeMask(inputValues, inputMasks);\n        }\n        var layerOutputs = getNodeOutputs(symbolic);\n        var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n        for (var i_1 = 0; i_1 < outputSymbolicTensors.length; ++i_1) {\n            if (!internalFeedDict.hasKey(outputSymbolicTensors[i_1])) {\n                internalFeedDict.add(outputSymbolicTensors[i_1], outputTensors[i_1], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n            }\n            var index = outputNames.indexOf(outputSymbolicTensors[i_1].name);\n            if (index !== -1) {\n                finalOutputs[index] = outputTensors[i_1];\n            }\n        }\n        if (!training) {\n            tfjs_core_1.dispose(tensorsToDispose);\n        }\n    }\n    internalFeedDict.disposeMasks();\n    return arrayFetches ? finalOutputs : finalOutputs[0];\n}\nexports.execute = execute;\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n    tfjs_core_1.util.assert(fetches != null && fetches.length > 0, \"Exepcted at least one fetch, got none\");\n    var finalSorted = [];\n    var finalRecipientMap = {};\n    if (fetches.length === 1) {\n        var out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n        finalSorted = out.sorted;\n        finalRecipientMap = out.recipientMap;\n    }\n    else {\n        var visited = new Set();\n        for (var _i = 0, fetches_1 = fetches; _i < fetches_1.length; _i++) {\n            var fetch_1 = fetches_1[_i];\n            var _a = getTopologicalSortAndRecipientCountsForOneFetch(fetch_1, feedDict), sorted = _a.sorted, recipientMap = _a.recipientMap;\n            for (var _b = 0, sorted_1 = sorted; _b < sorted_1.length; _b++) {\n                var symbolicTensor = sorted_1[_b];\n                if (!visited.has(symbolicTensor.name)) {\n                    finalSorted.push(symbolicTensor);\n                    visited.add(symbolicTensor.name);\n                }\n            }\n            var _loop_1 = function (name_1) {\n                if (finalRecipientMap[name_1] == null) {\n                    finalRecipientMap[name_1] = new Set();\n                }\n                recipientMap[name_1].forEach(function (recipient) { return finalRecipientMap[name_1].add(recipient); });\n            };\n            for (var name_1 in recipientMap) {\n                _loop_1(name_1);\n            }\n        }\n    }\n    return {\n        sorted: finalSorted,\n        recipientCounts: recipientMap2Counts(finalRecipientMap)\n    };\n}\nfunction recipientMap2Counts(recipientMap) {\n    var recipientCounts = {};\n    for (var name_2 in recipientMap) {\n        recipientCounts[name_2] = recipientMap[name_2].size;\n    }\n    return recipientCounts;\n}\nfunction getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {\n    var visited = new Set();\n    var sorted = [];\n    var recipientMap = {};\n    for (var _i = 0, _a = feedDict.names(); _i < _a.length; _i++) {\n        var key = _a[_i];\n        visited.add(key);\n    }\n    var stack = [];\n    var marks = [];\n    stack.push(fetch);\n    while (stack.length > 0) {\n        var top_1 = stack[stack.length - 1];\n        if (visited.has(top_1.name)) {\n            stack.pop();\n            continue;\n        }\n        var topIsMarked = marks[marks.length - 1] === stack.length - 1;\n        if (top_1.inputs.length === 0 || topIsMarked) {\n            stack.pop();\n            sorted.push(top_1);\n            visited.add(top_1.name);\n            if (topIsMarked) {\n                marks.pop();\n            }\n        }\n        else {\n            marks.push(stack.length - 1);\n            for (var _b = 0, _c = top_1.inputs; _b < _c.length; _b++) {\n                var input = _c[_b];\n                if (recipientMap[input.name] == null) {\n                    recipientMap[input.name] = new Set();\n                }\n                recipientMap[input.name].add(top_1.name);\n                if (visited.has(input.name)) {\n                    continue;\n                }\n                stack.push(input);\n            }\n        }\n    }\n    return { sorted: sorted, recipientMap: recipientMap };\n}\nexports.getTopologicalSortAndRecipientCountsForOneFetch = getTopologicalSortAndRecipientCountsForOneFetch;\nfunction getNodeOutputs(fetch) {\n    var layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    }\n    else {\n        var nodeIndex = null;\n        for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (var _i = 0, _a = fetch.sourceLayer.inboundNodes[i]\n                .outputTensors; _i < _a.length; _i++) {\n                var outputTensor = _a[_i];\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n","map":{"version":3,"file":"executor.js","sourceRoot":"","sources":["../../src/engine/executor.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"hash":"53e3c39d9bb73a2f1485094b6cf100aa","cacheData":{"env":{}}}